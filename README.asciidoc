dot2json
========
:author: Florian Gerstmayer
:doctype: article
:email: florian.gerstmayer@technikum-wien.at
:brand: UAS Technikum Wien
:partner: 
:icons:
:toc:
:footer:
:data-uri:
:date: 
:revision: 
:lang: en
:encoding: utf-8

This repository contains a python script (dot2json.py) which can be used to convert a *.dot file into visualizable *.json file.
The main idea is to create call graphs that can be shown and interacted with in a browser environment.
Primarily motivated was this work due to the limited possibilities in our developed CLOUD IDE to visualize the data gathered.
 +
For the visualization, a slightly modified version of the JavaScript library linkurious.js was used.
Hence, the JSON output of this script is optimized for this library.
Moreover, only a subset of the DOT keywords is supported by the script.

== Acknowledgment

This work has been conducted in the context of the public funded R&D project Software Analysis Toolbox managed by the Vienna City Council MA23.

== Setup

To use this tool the following packages are required to be installed:

* Python 2.7 or 3 (https://www.python.org/downloads/)

The tool/script was tested using the following operating systems &
environments:

* Fedora 23 (RedHat)
* Ubuntu (Debian)
* Windows 7
* MAC OS X
* Cloud IDE

For the visualization of the graph a web browser that supports
JavaScript is required. The following browsers were tested during
development and shall support the visualization. This list is not
exhaustive (Other browsers may be also supported).

* Mozilla Firefox 46.0.1
* Epiphany (Web) 3.18.5
* Safari 9.1.1
* Opera 38.0
* Chrome

Some browsers are very restrictive regarding the loading of external
files (e.g., main.json). In this case, a local web server is required to
visualize the graph. Among others, python provides one which can be
started by executing `python -m SimpleHTTPServer` on the command line.
This starts a web server on `localhost:8000` that can be accessed via
the browser.

== Requirements / Limitations

Currently the tool requires / supports only specific *.dot files
generated by the WCET analysis tool (see Section [OTAWATool]). Hence,
only a subset of the features available in the dot language are
supported and parseable. Moreover, the generated graph is optimized to
visualize the data provided by the WCET analysis tool. Thus, the usage
of the tool with *.dot files that contain unsupported features, like
subgraphs and clusters, or different data can result in errors or wrong
visualization.

== Usage

The tool is command line based and is invoked as follows: +
`./dot2json.py -i <File> [OPTIONS]`

[[options]]

=== Options

'-i, --input <file>'::
  This option requires a suitable *.dot file to be specified as input
  file. This option is *required* by the tool to create a control-flow
  graph.
'-o, --output <file>'::
  This option defines the output file location and name. By default, in
  the base directory of the script a directory labeled ``out'' is
  generated which contains a graph-file labeled
  ``<name>.cfg.html''. The output file
  contains by default the graph data.
'-j, --json <file>'::
  This option defines whether a *.json file shall be created in the
  specified file location. If this option is given, the output file will
  reference to this file as graph data input file and no data is stored
  within the output file.
'-d, --depend <file>'::
  This option defines where the script looks for the dependency files,
  the graph drawing library and other JavaScript files as well as the
  template html file, required for the graph visualization.
'-s <list>'::
  This option defines in which directory(ies) the script shall search
  for source code files (e.g., -s ./ example/ example/src/).
'-v'::
  This option increases the verbosity level of the script and can be
  provided multiple times (e.g., -vvv or -v -v -v).
'-c, --cloud'::
  Provided with this option, the script will copy the dependency
  directory to the output directory.
'-h, --help'::
  This option triggers the help information provided by the script.

=== Examples

The following few examples demonstrate typical usages of the script:

'./dot2json.py -i example/dot/main.dot'::
  creates a graph-file located at ``./out/main.cfg.html''. This file
  contains all data and can be opened using e.g, Mozilla Firefox.
'./dot2json.py -i example/dot/main.dot -o example/graph/main.html'::
  creates the graph-file located at ``./example/graph/main.html''.
'./dot2json.py -i example/dot/main.dot -j out/main.json'::
  creates in ``./out/'' the graph file named ``main.cfg.html'' and a
  json file named ``main.json'' that contains the data.
'./dot2json.py -i example/dot/main.dot -s example/src/'::
  creates a graph-file located at ``./out/main.cfg.html''. Additionally,
  the script searches for the source files referenced in the node
  information and adds the respective code lines to the graph.

== Graph

When the script is invoked with a parseable *.dot file, a graph-file is
generated which contains HTML elements and JavaScript code. The required
graph drawing libraries and other dependencies are referenced
accordingly (e.g., json file). The <<fig:Graph,figure below>> shows a generated CFG
(without labels and information). +

[[fig:Graph]]
image:img/Graph.png[CFG-Graph Example without labels]

The green nodes on the top and on the bottom of the CFG depict the
respective ENTRY and EXIT points of the CFG. Starting on the top, the
outgoing arrows(edges) of each node refer to the successor node.
Multiple outgoing edges are branches caused by conditional expressions.
An edge drawn with an continuous line depicts a successor-predecessor
relationship of nodes within a function. In case of a function call or
return, the edge is drawn in a dashed format. The different color of
nodes visualizes the information gathered by the WCET and WSA analysis:

* Blue is associated with nodes that reach the maximum of the
applicationâ€™s stack consumption.
* Red is associated with nodes that are part of the WCET path of the
application (critical path).
* Yellow is associated with nodes that are part of the WCET path and
which reach the maximum stack consumption.
* Green is associated with all other nodes.

In the <<fig:GraphInfo,figure below>> a more detailed look at the CFG is provided.
Here, also the labels of the nodes and edges (if available) are shown.
Moreover, the Information/Settings window is visible in its entirety. +

[[fig:GraphInfo]]
image:img/GraphInfo.png[CFG-Graph Snippet with expanded Information
Block]

The information window explains the meaning of the node colours as well
as the basic usage which will be elaborated also in this guide.
Moreover, settings are provided that allow a modification of the graph
(e.g., showing or hiding labels and manipulating their size). This
window can be minimized / collapsed by left-clicking with the mouse on
the header (Label Information/Settings). Another click on the header
expands the window again. +

The graph supports also Drag&Drop Features to rearrange single nodes of
the graph in case they are overlapping or falsely arranged. To do so,
the respective node can be grabbed by performing a left-click on it.
While keeping the left mouse button pressed the node can be moved until
the button is released. The <<fig:GraphMoving,figure below>> shows this behaviour.
Moreover, the entire graph can also be moved in the same manner if the
click is performed anywhere except a node.

[[fig:GraphMoving]]
image:img/GraphMoving.png[CFG-Graph Node Moving]

Additionally, when performing a left click on a node, the node specific
information is shown in a window on the left. The <<fig:GraphShortExtra,figure below>> shows the small default window which contains the
most important information, like the execution time and the stack usage
of the node.

[[fig:GraphShortExtra]]
image:img/GraphShortExtra.png[CFG-Graph Node Information Collapsed]

This window remains visible until a left click is performed anywhere on
the graph except a node (e.g., white space). While visible, the window
updates the information provided automatically when hovering over
different nodes. If more information regarding a node is desired, as for
example the assembly or the respective source code, a left-click on the
header of the window expands it. Another left-click on the header
collapses the information again. The expanded view is provided in the <<fig:GraphLargeExtra,figure below>>.

[[fig:GraphLargeExtra]]
image:img/GraphLargeExtra.png[CFG-Graph Node Information Expanded]

This view contains information regarding the respective source code
lines and the assembly of the basic block. As elaborated previously, if
provided with the source-directories, the script can replace the
reference to the c-files with the actual source code, which can be seen
in the <<fig:GraphLargeExtraSrc,figure below>>.

[[fig:GraphLargeExtraSrc]]
image:img/GraphLargeExtraSrc.png[CFG-Graph Node Information Expanded
+ Source Code]


